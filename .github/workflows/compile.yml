# 工作流名称
name: 编译报告并发布到 Release (Compile and Release PDFs)

# 触发条件：推送到 master 分支时
on:
  push:
    branches:
      - master

# 工作流任务
jobs:
  build_and_release:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 授予工作流写入仓库内容的权限，用于创建/更新 Release
    permissions:
      contents: write

    steps:
      # 第 1 步：检出仓库代码 (使用最新的 v4 版本)
      - name: 检出仓库代码 (Checkout repository)
        uses: actions/checkout@v4

      # 第 2 步：安装字体、替换字体名并编译所有文件
      - name: 安装字体、替换并编译 (Install, Replace & Compile)
        uses: xu-cheng/texlive-action@v2
        with:
          scheme: full
          run: |
            # 步骤 1: 使用 apk 安装 Noto CJK 字体包
            echo "正在安装中文字体..."
            apk update
            apk add --no-cache font-noto-cjk
            
            # 步骤 2: 在所有 .tex 和 .cls 文件中替换 Windows 字体名称
            echo "正在替换 LaTeX 源文件及模板中的字体名称..."
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimSun/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimHei/Noto Sans CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/KaiTi/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/FangSong/Noto Serif CJK SC/g' {} +
            echo "字体名称替换完成。"

            # 步骤 3: 编译所有符合条件的 .tex 文件
            echo "开始编译..."
            mkdir -p compiled_reports
            # 查找所有需要编译的 .tex 文件
            find . -type f -name "*.tex" ! -path "./template/*" ! -path "./大学物理实验-实验报告/*" ! -name "template.tex" | while read -r file; do
              echo "正在编译: $file"
              # --- 核心修改在这里 ---
              # 移除了 -cd 参数，让 latexmk 在项目根目录运行。
              # 这样，-output-directory=compiled_reports 就会将所有输出文件（包括PDF）
              # 全部正确地放入根目录下的 compiled_reports 文件夹中。
              latexmk -xelatex -output-directory=compiled_reports "$file"
            done
            echo "所有文件编译完成。"

      # 第 3 步【新增，用于调试】：检查生成的 PDF 文件
      # 强烈建议保留此步骤，它会清楚地显示 compiled_reports 文件夹里到底有什么文件。
      - name: 检查 PDF 文件路径 (Verify PDF files path)
        run: ls -R compiled_reports

      # 第 4 步：创建或更新 Release 并上传 PDF
      - name: 创建/更新 Release 并上传PDF (Create/Update Release and Upload PDFs)
        uses: softprops/action-gh-release@v2
        with:
          # 每次运行都会覆盖名为 'latest-reports' 的这个标签和 Release
          tag_name: latest-reports
          name: 最新实验报告 (Latest Reports)
          body: |
            自动编译生成的最新实验报告PDF。
            此 Release 由 GitHub Action 自动更新。
          # 标记为预发布版本
          prerelease: true
          # 现在这个路径可以正确找到所有编译好的 PDF 了
          files: compiled_reports/*.pdf
