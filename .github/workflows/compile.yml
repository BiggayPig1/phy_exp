# 工作流名称
name: 编译报告并发布到 Release (Compile and Release PDFs)

# 触发条件：推送到 master 分支时
on:
  push:
    branches:
      - master

# 工作流任务
jobs:
  build_and_release:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 授予工作流写入仓库内容的权限
    permissions:
      contents: write

    steps:
      # 第 1 步：检出仓库代码
      - name: 检出仓库代码 (Checkout repository)
        uses: actions/checkout@v4

      # 第 2 步：安装字体、替换字体名并编译所有文件
      - name: 安装字体、替换并编译 (Install, Replace & Compile)
        uses: xu-cheng/texlive-action@v2
        with:
          scheme: full
          run: |
            echo "正在安装中文字体..."
            apk update && apk add --no-cache font-noto-cjk
            
            echo "正在替换 LaTeX 源文件及模板中的字体名称..."
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimSun/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimHei/Noto Sans CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/KaiTi/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/FangSong/Noto Serif CJK SC/g' {} +
            echo "字体名称替换完成。"

            echo "开始编译并收集PDF..."
            mkdir -p compiled_reports
            find . -type f -name "*.tex" ! -path "./template/*" ! -path "./大学物理实验-实验报告/*" ! -name "template.tex" | while read -r file; do
              echo "-----------------------------------------------------"
              echo ">>> 正在处理文件: $file"
              DIR=$(dirname "$file")
              BASENAME=$(basename "$file" .tex)
              
              # --- 核心修改在这里 ---
              # 使用 -jobname 参数明确指定输出文件的基础名称 (例如 "非平衡电桥")
              # 这可以避免 latexmk 自动推断错误，生成 default.pdf 或 2.pdf 等非预期文件名
              if latexmk -xelatex -cd -jobname="$BASENAME" "$file"; then
                echo "    编译成功: $file"
                echo "    正在移动 PDF: $DIR/$BASENAME.pdf"
                mv "$DIR/$BASENAME.pdf" compiled_reports/
              else
                echo "::error::文件编译失败: $file. 请检查日志获取详细信息。"
                exit 1
              fi
            done
            echo "所有文件处理完成。"

      # 第 3 步：删除旧的 Release 和标签以避免更新冲突
      - name: 删除旧的 Release 和标签 (Delete Old Release and Tag)
        run: |
          gh release delete latest-reports --yes --cleanup-tag || echo "Release 'latest-reports' not found, proceeding."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 第 4 步：创建新的 Release 并上传 PDF
      - name: 创建新的 Release 并上传PDF (Create New Release and Upload PDFs)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-reports
          name: 最新实验报告 (Latest Reports)
          body: |
            自动编译生成的最新实验报告PDF。
            此 Release 由 GitHub Action 自动更新。
          prerelease: true
          files: compiled_reports/*.pdf
