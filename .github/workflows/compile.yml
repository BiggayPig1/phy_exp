# 工作流名称
name: 根据标签发布报告 (Release PDFs on Tag)

# 触发条件：当一个以 'v' 开头的标签被创建时
on:
  push:
    tags:
      - 'v*'

# 工作流任务
jobs:
  build_and_release:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 授予工作流写入仓库内容的权限
    permissions:
      contents: write

    steps:
      # 第 1 步：检出仓库代码
      - name: 检出仓库代码 (Checkout repository)
        uses: actions/checkout@v4

      # 第 2 步：编译所有 PDF 文件
      - name: 安装字体、替换并编译 (Install, Replace & Compile)
        uses: xu-cheng/texlive-action@v2
        with:
          scheme: full
          run: |
            echo ">>> 正在运行最终解决方案 v7.1 (纯官方GH命令行工具 + 详细日志) <<<"
            
            echo "正在安装中文字体..."
            apk update && apk add --no-cache font-noto-cjk
            
            echo "正在替换 LaTeX 源文件及模板中的字体名称..."
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimSun/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimHei/Noto Sans CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/KaiTi/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/FangSong/Noto Serif CJK SC/g' {} +
            echo "字体名称替换完成。"

            echo "开始编译并收集PDF..."
            mkdir -p compiled_reports
            find . -type f -name "*.tex" ! -path "./template/*" ! -path "./大学物理实验-实验报告/*" ! -name "template.tex" | while read -r file; do
              echo ">>> 正在处理文件: $file"
              DIR=$(dirname "$file")
              BASENAME=$(basename "$file" .tex)
              
              if latexmk -xelatex -cd -jobname="$BASENAME" "$file"; then
                echo "    编译成功: $file"
                mv "$DIR/$BASENAME.pdf" compiled_reports/
              else
                echo "::error::文件编译失败: $file. 请检查日志获取详细信息。"
                exit 1
              fi
            done
            echo "所有文件处理完成。"

      # 第 3 步：使用 GitHub 官方命令行工具创建 Release 并上传所有文件
      - name: 使用 GH CLI 创建 Release 并上传附件 (Create Release & Upload Assets via GH CLI)
        env:
          # 认证 GH CLI 所需的 Token
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # --- 日志输出 ---
          echo "=================================================="
          echo "准备发布 Release..."
          echo "使用的标签 (Tag): ${{ github.ref_name }}"
          echo "=================================================="
          
          # 防御性措施：先尝试删除旧的 Release
          echo ""
          echo "[1/3] 正在尝试删除可能存在的旧 Release 和 Tag..."
          if gh release delete ${{ github.ref_name }} --yes --cleanup-tag; then
            echo "    > 成功删除旧的 Release 和 Tag: ${{ github.ref_name }}"
          else
            echo "    > 未找到旧的 Release，或删除失败（这是正常情况），继续执行创建。"
          fi
          
          # 准备上传的文件列表日志
          echo ""
          echo "[2/3] 准备上传以下文件到 Release:"
          ls -R compiled_reports
          
          # 创建并上传
          echo ""
          echo "[3/3] 正在创建新的 Release 并上传所有 PDF 文件..."
          gh release create ${{ github.ref_name }} compiled_reports/*.pdf \
            --title "实验报告 ${{ github.ref_name }}" \
            --notes "自动编译生成的实验报告PDF。由 GitHub Action (官方CLI) 创建。"
          
          echo ""
          echo "✅ Release 发布流程执行完毕。"
          echo "=================================================="
