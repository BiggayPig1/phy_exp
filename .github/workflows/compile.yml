# 工作流名称
name: 编译LaTeX报告并发布ZIP包

# 触发条件
on:
  push:
    branches:
      - master

# 工作流任务
jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 第 1 步：检出仓库代码
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 第 2 步：编译所有报告
      - name: 编译所有LaTeX报告
        uses: xu-cheng/texlive-action@v2
        with:
          scheme: full
          run: |
            # 准备工作：安装字体、替换模板中的字体名
            apk update && apk add --no-cache font-noto-cjk
            
            # 替换字体名称
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimSun/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimHei/Noto Sans CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/KaiTi/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/FangSong/Noto Serif CJK SC/g' {} +

            # 创建目标目录
            mkdir -p compiled_reports

            # 编译循环：对每个文件进行编译
            for file in $(find . -type f -name "*.tex" ! -path "./template/*" ! -path "./大学物理实验-实验报告/*" ! -name "template.tex"); do
              echo "--- 开始编译文件: $file ---"
              
              # 获取文件信息
              dir=$(dirname "$file")
              base_name=$(basename "$file" .tex)
              job_name=$(basename "$dir")
              
              echo "目录: $dir"
              echo "基础文件名: $base_name"
              echo "作业名称: $job_name"
              
              # 记录当前目录
              current_dir=$(pwd)
              
              # 进入目录编译
              cd "$dir"
              
              # 编译LaTeX文件
              latexmk -xelatex -jobname="$base_name" "$base_name.tex"
              
              # 检查PDF是否生成
              if [ -f "$base_name.pdf" ]; then
                echo "--- 成功生成: $base_name.pdf ---"
                # 使用绝对路径移动文件
                mv "$base_name.pdf" "$current_dir/compiled_reports/$base_name.pdf"
                echo "--- 已移动到: $current_dir/compiled_reports/$base_name.pdf ---"
              else
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                echo "!! 警告: 编译失败，未能生成 PDF 文件: $base_name.pdf"
                echo "!! 当前目录: $(pwd)"
                # 尝试查看日志文件
                if [ -f "$base_name.log" ]; then
                  echo "!! 错误日志 (最后30行):"
                  tail -n 30 "$base_name.log"
                fi
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              fi
              
              # 清理临时文件
              latexmk -c
              
              # 返回根目录
              cd "$current_dir"
            done

      # 第 3 步: 检查编译结果
      - name: 检查编译结果
        run: |
          echo "--- 检查编译结果 ---"
          if [ -z "$(ls -A compiled_reports 2>/dev/null)" ]; then
            echo "错误: 'compiled_reports' 目录是空的！没有PDF被成功编译。"
            echo "当前工作目录: $(pwd)"
            echo "目录结构:"
            find . -name "*.pdf" -type f | head -20
            exit 1
          else
            echo "成功编译的PDF文件:"
            ls -la compiled_reports/
            echo "PDF文件数量: $(ls -1 compiled_reports/*.pdf 2>/dev/null | wc -l)"
            echo "总大小: $(du -sh compiled_reports/)"
          fi

      # 第 4 步: 创建ZIP文件
      - name: 创建ZIP压缩包
        run: |
          echo "--- 创建ZIP压缩包 ---"
          # 获取当前日期用于文件名
          current_date=$(date +"%Y%m%d")
          zip_name="实验报告_${current_date}_build_${{ github.run_number }}.zip"
          
          # 进入目录创建ZIP，避免包含路径信息
          cd compiled_reports
          zip -r "../$zip_name" ./*
          cd ..
          
          echo "ZIP文件已创建: $zip_name"
          ls -lh "$zip_name"

      # 第 5 步：生成Release正文
      - name: 生成Release正文
        run: |
          echo "--- 生成Release正文 ---"
          cat > release_body.md << EOF
          # 实验报告自动编译版本

          **构建信息:**
          - Commit: \`${{ github.sha }}\`
          - 触发时间: ${{ github.event.head_commit.timestamp }}
          - 运行ID: ${{ github.run_id }}

          **包含的报告:**
          EOF
          
          cd compiled_reports
          for pdf in *.pdf; do
            echo "- $pdf" >> ../release_body.md
          done
          cd ..
          
          cat >> release_body.md << EOF

          **下载说明:**
          - 点击下方的ZIP文件下载所有报告
          - 解压后即可查看所有PDF文件
          EOF
          
          echo "Release正文已生成:"
          cat release_body.md

      # 第 6 步：创建 Release 并上传ZIP文件
      - name: 创建 Release 并上传ZIP
        uses: softprops/action-gh-release@v2
        with:
          tag_name: reports-${{ github.run_id }}-${{ github.run_number }}
          name: 实验报告合集
          body_path: release_body.md
          draft: false
          make_latest: true
          prerelease: false
          files: |
            *.zip
