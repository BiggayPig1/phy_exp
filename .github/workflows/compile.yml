# 工作流名称
name: 编译、收集并发布PDF报告 (优化版)

# 触发条件
on:
  push:
    branches:
      - master

# 工作流任务
jobs:
  build_collect_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 第 1 步：检出仓库代码
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 第 2 步：编译所有报告
      - name: 编译所有LaTeX报告
        uses: xu-cheng/texlive-action@v2
        with:
          scheme: full
          run: |
            # 准备工作：安装字体、替换模板中的字体名
            apk update && apk add --no-cache font-noto-cjk
            
            # 替换字体名称
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimSun/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimHei/Noto Sans CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/KaiTi/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/FangSong/Noto Serif CJK SC/g' {} +

            # 编译循环：对每个文件进行编译
            for file in $(find . -type f -name "*.tex" ! -path "./template/*" ! -path "./大学物理实验-实验报告/*" ! -name "template.tex"); do
              echo "--- 开始编译文件: $file ---"
              
              # 获取文件信息
              dir=$(dirname "$file")
              base_name=$(basename "$file" .tex)
              
              echo "目录: $dir"
              echo "基础文件名: $base_name"
              
              # 进入目录编译
              cd "$dir"
              
              # 编译LaTeX文件，使用基础文件名作为输出
              latexmk -xelatex -jobname="$base_name" "$base_name.tex"
              
              # 检查PDF是否生成
              if [ -f "$base_name.pdf" ]; then
                echo "--- 成功生成: $base_name.pdf ---"
              else
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                echo "!! 错误: 编译失败，未能生成 PDF 文件"
                echo "!! 当前目录: $(pwd)"
                echo "!! 文件列表:"
                ls -la
                # 尝试查看日志文件
                if [ -f "$base_name.log" ]; then
                  echo "!! 错误日志 (最后50行):"
                  tail -n 50 "$base_name.log"
                fi
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              fi
              
              # 清理临时文件
              latexmk -c
              
              # 返回根目录
              cd - > /dev/null
            done

      # 第 3 步: 收集所有PDF到 'final_reports' 文件夹
      - name: 收集所有PDF到 'final_reports' 文件夹
        run: |
          echo "--- 开始收集PDF文件 ---"
          mkdir -p final_reports
          
          # 查找并复制所有PDF文件，排除不需要的文件
          find . -name "*.pdf" ! -name "default.pdf" ! -name "_.pdf" ! -path "./final_reports/*" ! -path "./.git/*" ! -path "./template/*" -exec cp {} final_reports/ \;
          
          # 重命名有问题的文件名（如果有空格或特殊字符）
          cd final_reports
          for f in *; do
            new_name=$(echo "$f" | sed 's/[^a-zA-Z0-9._\-()（）\u4e00-\u9fff]/_/g')
            if [ "$f" != "$new_name" ]; then
              mv "$f" "$new_name"
            fi
          done
          cd ..

      # 第 4 步: 检查最终的文件夹内容
      - name: 检查 'final_reports' 文件夹并列出内容
        run: |
          echo "--- 正在检查 'final_reports' 目录内容，准备上传 ---"
          if [ -z "$(ls -A final_reports 2>/dev/null)" ]; then
            echo "错误: 'final_reports' 目录是空的！没有PDF被成功收集。"
            echo "当前目录结构:"
            find . -name "*.pdf" -type f | head -20
            exit 1
          else
            echo "'final_reports' 目录内容如下:"
            ls -la final_reports/
            echo "PDF文件数量: $(ls -1 final_reports/*.pdf 2>/dev/null | wc -l)"
            echo "总大小: $(du -sh final_reports/)"
          fi

      # 第 5 步：创建 Release 并上传PDF（带重试机制）
      - name: 创建 Release 并上传PDF
        uses: softprops/action-gh-release@v2
        with:
          tag_name: reports-${{ github.run_id }}-${{ github.run_number }}
          name: 实验报告编译版本 ${{ github.run_number }}
          body: |
            由 GitHub Actions 自动编译生成的实验报告。

            **构建信息:**
            - Commit: `${{ github.sha }}`
            - 触发时间: ${{ github.event.head_commit.timestamp }}
            - 运行ID: ${{ github.run_id }}

            **包含的报告:**
            $(cd final_reports && for pdf in *.pdf; do echo "- \`$pdf\`"; done)
          draft: false
          make_latest: true
          prerelease: false
          files: |
            final_reports/*.pdf
