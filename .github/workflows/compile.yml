# 工作流名称
name: 编译报告并发布到 Release (Compile and Release PDFs)

# 触发条件：推送到 master 分支时
on:
  push:
    branches:
      - master

# 工作流任务
jobs:
  build_and_release:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 授予工作流写入仓库内容的权限
    permissions:
      contents: write

    steps:
      # 第 1 步：检出仓库代码
      - name: 检出仓库代码 (Checkout repository)
        uses: actions/checkout@v4

      # 第 2 步：安装字体、替换字体名并编译所有文件
      - name: 安装字体、替换并编译 (Install, Replace & Compile)
        uses: xu-cheng/texlive-action@v2
        with:
          scheme: full
          run: |
            echo "正在安装中文字体..."
            apk update && apk add --no-cache font-noto-cjk
            
            echo "正在替换 LaTeX 源文件及模板中的字体名称..."
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimSun/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimHei/Noto Sans CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/KaiTi/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/FangSong/Noto Serif CJK SC/g' {} +
            echo "字体名称替换完成。"

            echo "开始编译并收集PDF..."
            mkdir -p compiled_reports
            find . -type f -name "*.tex" ! -path "./template/*" ! -path "./大学物理实验-实验报告/*" ! -name "template.tex" | while read -r file; do
              echo "-----------------------------------------------------"
              echo ">>> 正在处理文件: $file"
              DIR=$(dirname "$file")
              BASENAME=$(basename "$file" .tex)
              
              if latexmk -xelatex -cd -jobname="$BASENAME" "$file"; then
                echo "    编译成功: $file"
                echo "    正在移动 PDF: $DIR/$BASENAME.pdf"
                mv "$DIR/$BASENAME.pdf" compiled_reports/
              else
                echo "::error::文件编译失败: $file. 请检查日志获取详细信息。"
                exit 1
              fi
            done
            echo "所有文件处理完成。"

      # 第 3 步【核心修改】：使用更稳健的 Action 创建 Release
      - name: 创建或更新 Release (Create or Update Release)
        uses: ncipollo/release-action@v1
        with:
          # 要上传的文件路径，支持通配符
          artifacts: "compiled_reports/*.pdf"
          # GitHub 会自动提供这个 token，无需手动设置
          token: ${{ secrets.GITHUB_TOKEN }}
          # 允许 action 更新已存在的 release
          allowUpdates: true
          # 每次都使用同一个 tag name
          tag: latest-reports
          # Release 的名称
          name: 最新实验报告 (Latest Reports)
          # Release 的描述
          body: |
            自动编译生成的最新实验报告PDF。
            此 Release 由 GitHub Action 自动更新。
          # 标记为预发布
          prerelease: true
