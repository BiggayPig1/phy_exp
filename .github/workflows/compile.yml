# 工作流名称
name: 根据标签发布报告 (Release PDFs on Tag)

# 触发条件：当一个以 'v' 开头的标签被创建时 (例如 v1.0, v2.0-reports)
on:
  push:
    tags:
      - 'v*' # 使用 'v*' 通配符匹配所有以 v 开头的标签

# 工作流任务
jobs:
  build_and_release:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 授予工作流写入仓库内容的权限
    permissions:
      contents: write

    steps:
      # 第 1 步：检出仓库代码
      - name: 检出仓库代码 (Checkout repository)
        uses: actions/checkout@v4

      # 第 2 步：安装字体、替换字体名并编译所有文件
      - name: 安装字体、替换并编译 (Install, Replace & Compile)
        uses: xu-cheng/texlive-action@v2
        with:
          scheme: full
          run: |
            echo ">>> 正在运行最终解决方案 v6.0 (softprops + 先删除后创建) <<<"
            
            echo "正在安装中文字体..."
            apk update && apk add --no-cache font-noto-cjk
            
            echo "正在替换 LaTeX 源文件及模板中的字体名称..."
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimSun/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/SimHei/Noto Sans CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/KaiTi/Noto Serif CJK SC/g' {} +
            find . -type f \( -name "*.tex" -o -name "*.cls" \) -exec sed -i 's/FangSong/Noto Serif CJK SC/g' {} +
            echo "字体名称替换完成。"

            echo "开始编译并收集PDF..."
            mkdir -p compiled_reports
            find . -type f -name "*.tex" ! -path "./template/*" ! -path "./大学物理实验-实验报告/*" ! -name "template.tex" | while read -r file; do
              echo ">>> 正在处理文件: $file"
              DIR=$(dirname "$file")
              BASENAME=$(basename "$file" .tex)
              
              if latexmk -xelatex -cd -jobname="$BASENAME" "$file"; then
                echo "    编译成功: $file"
                mv "$DIR/$BASENAME.pdf" compiled_reports/
              else
                echo "::error::文件编译失败: $file. 请检查日志获取详细信息。"
                exit 1
              fi
            done
            echo "所有文件处理完成。"

      # 第 3 步【核心策略】：强制删除可能存在的旧 Release
      # 确保 softprops/action-gh-release 每次都是在“创建”新的 Release
      - name: 强制删除旧的 Release (Force Delete Old Release)
        run: |
          gh release delete ${{ github.ref_name }} --yes --cleanup-tag || echo "Release not found, proceeding to create."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 第 4 步：使用 softprops/action-gh-release 创建一个全新的 Release
      - name: 创建新的 Release (Create New Release)
        uses: softprops/action-gh-release@v2
        with:
          # 要上传的文件
          files: compiled_reports/*.pdf
          # 动态获取触发工作流的标签名
          tag_name: ${{ github.ref_name }}
          # Release 的标题
          name: "实验报告 ${{ github.ref_name }}"
          # Release 的描述
          body: |
            自动编译生成的实验报告PDF。
            Release from tag: ${{ github.ref_name }}
